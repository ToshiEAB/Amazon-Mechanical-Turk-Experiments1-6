<!DOCTYPE html>
<html lang="ja">
    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <meta charset="utf-8">
        <style>
            .responsePanel {
                margin : 0px auto;
                position: absolute;
            }
            .workplace {
                margin : 0px auto;
                width: 350px;
                height: 350px;
                border-radius: 5px;
                border: solid 3px #800000;
                background-color: #fea636;
                opacity: 0.2;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            .respButton {
                margin : 0px auto;
                width: 100px;
                height: 100px;
                padding: 3px;
                border-radius: 5px;
                border: solid 1px #000000;
    	        text-align: center;
                color: white;
    	        font-weight: bold;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            .respButton:hover {
                opacity: 0.8;
            }
            .scoreContainer {
                position: absolute;
            }
            #barPoint {
                margin : 0px auto;
                width: 50px;
                border: solid 1px #000000;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            #barPoint.normal {
                background: #d3d3d3;
            }
            #barPoint.flashRed {
                background: #ff0000;
            }
            #barPoint.flashGreen {
                background: #00ff00;
            }
            #lblBarPoint {
                margin : 0px auto;
                font-size: 12pt;
                font-weight: bold;
                width: 50px;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            #lblDollar {
                margin : 0px auto;
                font-size: 12pt;
                width: 200px;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            #lblNetGain {
                margin : 0px auto;
                font-size: 14pt;
                width: 50px;
                text-align: center;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            html,body{
                margin : 0px auto;
                width: 100%;
                height: 100%;
                
            }
            #hourglass {
                margin : 0px auto;
                width: 240px;
                height: 240px;
                position: absolute;
                background: url(/wp-content/themes/luxech/images/hourglass.gif);
                background-repeat: no-repeat;
                display: none;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            #hourglass.appear {
                display: block;
            }
            #imgBeach {
                margin : 0px auto;
                width: 100%;
                height: 100%;
                background: url(/wp-content/themes/luxech/images/beach.jpg);
                background-size: cover;
                background-repeat: no-repeat;
                display: none;
            }
            #imgBeach.appear {
                display: block;
            }
            #imgDesert {
                margin : 0px auto;
                width: 100%;
                height: 100%;
                background: url(/wp-content/themes/luxech/images/desert.jpg);
                background-size: cover;
                background-repeat: no-repeat;
                display: none;
            }
            #imgDesert.appear {
                display: block;
            }
            .Star {
                margin : 0px auto;
                font-size: 18pt;
                width: 200px;
                height: 200px;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            .Gain {
                margin : 0px auto;
                font-size: 18pt;
                width: 50px;
                text-align: center;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            .Loss {
                margin : 0px auto;
                font-size: 18pt;
                width: 50px;
                text-align: center;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            .saveContainer {
                margin : 0px auto;
                width: 60%;
                position: relative;
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }

        </style>
    </head>
    <body>
        
        <div class='responsePanel' id='leftPanel'>
            <div class='workplace' id='leftWorkplace'></div>
            <div class='respButton' id='btnLeft' onmousedown='return false'></div>
            <p><br></p>
        </div>
        
        <div class='responsePanel' id='rightPanel'>
            <div class='workplace' id='rightWorkplace'></div>
            <div class='respButton' id='btnRight' onmousedown='return false'></div>
        </div>
        
        <div class='scoreContainer' id ='scoreBoard'>
            <div class='normal' id='barPoint'></div>
            <div id='lblBarPoint'></div>
            <div id='lblDollar'></div>
            <div id='lblNetGain'></div>
        </div>
        
        <div id='hourglass'></div>
        <div id='imgBeach'></div>
        <div id='imgDesert'></div>
        <div class='Star' id='imgStarLeft'></div>
        <div class='Star' id='imgStarRight'></div>
        <div class='Gain' id='lblGainLeft'></div>
        <div class='Gain' id='lblGainRight'></div>
        <div class='Loss' id='lblLossLeft'></div>
        <div class='Loss' id='lblLossRight'></div>
        
        <div class='saveContainer' id ='saveData'>
            <p><br></p>
            <p><br></p>
            <p><br></p>
            <p><span id='lblMessage' style='font-size:16px;margin-left:15%;margin-right:10%;'></span></p>
            <div><input id='btnSaveData' type='button' style='width:180px;background-color:yellow;padding:10px;font-size:24px;margin-left:35%;margin-right:10%;' value='Proceed'></div>
            <p><br></p>
        </div>
        
        <script>
            "use strict";
            
            // URLs (***** Change the following URLs to match your domain name. Also change the URLs in the CSS codes above if any)
            const URL_page_endofsession = 'https://_________.com/endofsession/'; // Page immediately after session
            const URL_page_terminated = 'https://_________.com/terminated/'; // Page when no response occurs in the first X sec
            const URL_page_backpage = 'https://_________.com/backpage/'; // Page when trying to re-enter the session page
            
            // The following URL assumes that you uploaded relevant files to the "images" directory under the directory for the Luxech theme
            const URL_image_heart = '<img src ="/wp-content/themes/luxech/images/heart.png">'; 
            const URL_image_club = '<img src ="/wp-content/themes/luxech/images/club.png">'; 
            const URL_image_star = '<img src ="/wp-content/themes/luxech/images/star_pt.png">';
            
            // The following URL assumes that you uploaded relevant files to the directory for the Luxech theme
            const URL_php_savedatafile = '/wp-content/themes/luxech/SaveDataFile.php';
            
             // Objects
            const leftPanel = document.getElementById('leftPanel');
            const leftWorkplace = document.getElementById('leftWorkplace');
            const btnLeft = document.getElementById('btnLeft');
            const rightPanel = document.getElementById('rightPanel');
            const rightWorkplace = document.getElementById('rightWorkplace');
            const btnRight = document.getElementById('btnRight');
            const scoreBoard = document.getElementById('scoreBoard');
            const barPoint= document.getElementById('barPoint');
            const lblBarPoint= document.getElementById('lblBarPoint');
            const lblDollar= document.getElementById('lblDollar');
            const lblNetGain= document.getElementById('lblNetGain');
            const hourglass = document.getElementById('hourglass');
            const imgBeach = document.getElementById('imgBeach');
            const imgDesert = document.getElementById('imgDesert');
            const imgStarLeft= document.getElementById('imgStarLeft');
            const imgStarRight = document.getElementById('imgStarRight');
            const lblGainLeft = document.getElementById('lblGainLeft'); 
            const lblGainRight = document.getElementById('lblGainRight'); 
            const lblLossLeft = document.getElementById('lblLossLeft');
            const lblLossRight = document.getElementById('lblLossRight');
            const saveData = document.getElementById('saveData');
            const lblMessage = document.getElementById('lblMessage');
            const btnSaveData = document.getElementById('btnSaveData');

            // Parameters
            const basePay = 0.5; // $0.50
            const VI_Target = 2;
            const VI_Alt = 2;
            const COR = 1;
            var lossWeight = 0;
            var noLossSign = 0; // Just for "0"
            const gainWeight = 100;
            const initPoint = 1000;//100; // Set at 100
            var symbol = 0; // 0 = heart/club; 1 = club/heart
            const terminatePhase1 = 30000; // in ms
            const dollarPerPoint = 0.00005; 
            var background = Array(3);
            background.fill(0);
            var targetSide = 0; // 0 = left, 1 = right
            
            // Variables for future experiments
            const ITIlength = 0; // in ms
            var altVIinPhase3 = 0; // 0 = No, 1 = Yes
            var noPhase1 = 0; // 0 = No, 1 = Yes 
            
            // Intervals
            const intervalPeriodLength = 12000; // in ms (set at 12000)
            const numIntervalsPhase1 = 15; // Phase 1 (set at 15)
            const criterion = 0.2; // 0.2 for 20% of responding (i.e., 80% reduction) in Phase 1
            const metCountCriterion = 2; // Phase 2 (set at 2)
            const MinCountCriterion = 5; // Phase 2 (set at 5)
            const MaxCountCriterion = 30; // Phase 2 (set at 30)
            const numIntervalsPhase3 = 5; // Phase 3 (set at 5)  
            
            // Dependent variables
            var ID = 0;
            var GROUP = 0;
            var code = 0;
            var dtStart = [];
            var dtEnd = [];
            var targetRespCount = 0;
            var altRespCount = 0;
            var totalGain = 0;
            var totalLoss = 0;
            var netGain = 0;
            var meanTargetRespPhase1 = 0;
            var totalSR = 0;
            var srPhase1 = 0;
            var srPhase2 = 0;
            var srPhase3 = 0;
            
            // Arrays
            var arrTargetRespCountPhase1 = [];
            var arrTargetRespCountPhase2 = [];
            var arrTargetRespCountPhase3 = [];
            var arrAltRespCountPhase1 = [];
            var arrAltRespCountPhase2 = [];
            var arrAltRespCountPhase3 = [];
            
            // Events
            var numOfEvents = 0;
            var arrEvents = [];
            
            // Thread
            const thread = `
                onmessage = function timer() {
                    postMessage("e"); 
                    setTimeout(timer, 10); }
            `;
            const blob = new Blob([thread]);
            const blobURL = URL.createObjectURL(blob);
            const tickTock = new Worker(blobURL); 
            
            // Screen size
            const Width = window.parent.screen.width;
            const Height = window.parent.screen.height - 200;
            const offsetMidline = 300;
            
            // Flags
            var flagITI = 0;
            var flagInitPhase1 = 1; 
            var flagEndPhase1 = 0;
            var flagInitSRPhase2 = 1;
            var flagEndPhase2 = 0;
            var flagEndSession = 0;
            var flagSaveButtonClick = 0;
            var flagDuringSave = 0;
            var flagTerminate = 0;
            var flagCOR_Target = 0;
            var flagCOR_Alt = 0;            
            
            // Time-related variable
            var startTime = 0;
            var intervalOnsetMotion = 0;
            var intervalOnsetPeriod = 0;
            var intervalOnsetITI = 0;
            var adjForITI = 0;

            // Miscellaneous
            var dtSt = 0;
            var dtE = 0;
            var onsetVI = 0;
            var tmpTargetRespCount = 0;
            var tmpAltRespCount = 0;
            var intervalCountPhase1 = 0;
            var criterionMetCount = 0;
            var intervalCountPhase3 = 0;
            var bottomPanel = 0;
            var tmpCOR_Target = 0;
            var tmpCOR_Alt = 0;

            // Button-related variables
            const buttonSize = btnLeft.clientWidth; 
            const motionInterval = 200; // in ms
            const motionRange = 1.2;
            const buttonMotionStep = buttonSize / 5;
            const adj = buttonSize * motionRange;
            var btnLeftMinX = 0;
            var btnLeftMaxX = 0;
            var btnLeftMinY = 0;
            var btnLeftMaxY = 0;
            var btnRightMinX = 0;
            var btnRightMaxX = 0;
            var btnRightMinY = 0;
            var btnRightMaxY = 0;
            
            // hourglass
            const hourglassWidth = 240;
            const hourglassHeight = 240;
            
            // Star, points above, and points below button
            const starOffsetX = -50;
            const starOffsetY = 200;
            const gainOffsetX = 15;
            const gainOffsetY = 120;
            const lossOffsetX = 25;
            const lossOffsetY = 10;
            
            // Bar point
            const lblOffset = 30;
            const pixelRatio = 50;
            const lblBarPointOffset = 10;
            
            // xorshift RNG
            var x = 123456789;
            var y = 362436069;
            var z = 521288629;
            var w = 88675123;

            // Fleshler & Hoffman
            var Value_Variable = 0;
            var v = 0;
            var n = 0;
            var order = 0;
            var Iteration_Variable = 0;
            var Iterations = 10;
            var rd = Array(Iterations + 1);
            var vi= Array(Iterations + 1);
            var Sumxser = 0;
            
            (function() {
                btnLeft.addEventListener('mousedown',function() {
                    btnLeft.style.opacity = 1.0;
                    btnRight.style.opacity = 0.5;
                    if (targetSide == 0) { // 0 = Left, 1 = Right
                        TargetResp(0); 
                    } else {
                        AltResp(0);    
                    }
                });
                btnRight.addEventListener('mousedown',function() {
                    btnRight.style.opacity = 1.0;
                    btnLeft.style.opacity = 0.5;
                    if (targetSide == 0) {
                        AltResp(1);
                    } else {
                        TargetResp(1); 
                    }
                });
                leftWorkplace.addEventListener('mousedown',function() {
                    EventMarker("03");
                });
                rightWorkplace.addEventListener('mousedown',function() {
                    EventMarker("04");
                });
                barPoint.addEventListener('mousedown',function() {
                    EventMarker("05");
                });
                lblBarPoint.addEventListener('mousedown',function() {
                    EventMarker("06");
                });
                lblDollar.addEventListener('mousedown',function() {
                    EventMarker("07");
                });
                lblNetGain.addEventListener('mousedown',function() {
                    EventMarker("08");
                });
                $('html').click(function(e) {
                    if(e.target.tagName == 'HTML') {
                        EventMarker("09");
                    }
                });
                imgBeach.addEventListener('mousedown',function() {
                    EventMarker("09");
                });
                imgDesert.addEventListener('mousedown',function() {
                    EventMarker("09");
                });
                imgStarLeft.addEventListener('mousedown',function() {
                    EventMarker("10");
                });
                imgStarRight.addEventListener('mousedown',function() {
                    EventMarker("11");
                });
                lblGainLeft.addEventListener('mousedown',function() {
                    EventMarker("12");
                });
                lblGainRight.addEventListener('mousedown',function() {
                    EventMarker("13");
                });
                lblLossLeft.addEventListener('mousedown',function() {
                    EventMarker("14");
                });
                lblLossRight.addEventListener('mousedown',function() {
                    EventMarker("15");
                });
                hourglass.addEventListener('mousedown',function() {
                    EventMarker("16");
                });
                btnSaveData.addEventListener('mousedown',function() {
                    SaveData();
                });
            })();
            
            function TargetResp(side) {
                targetRespCount++;
                tmpTargetRespCount++;
                EventMarker("01");
                //console.log("Target: " + targetRespCount);
                
                // COR
                tmpCOR_Target++;
                flagCOR_Alt = 1;
                tmpCOR_Alt = 0;
                
                respCost(side);

                if (flagInitPhase1) {
                    // Note: Phase 1 does not start until the first SR, after meeting COR
                    // COR
                    if (tmpCOR_Target > COR) {
                        flagCOR_Target = 0;
                    }
                    if (flagCOR_Target == 1) {
                        if (!noLossSign) {
                            flashRed();
                        }
                        //console.log("  COR required");
                        calcPoint();
                        return;
                    }
                    
                    SR(side);
                    intervalOnsetPeriod = performance.now();
                    
                    onsetVI = performance.now();
                    tmpTargetRespCount = 0;
                    tmpAltRespCount = 0;
                    flagInitPhase1 = 0;
                } else {
                    if (!flagEndPhase1) {
                        // Phase 1
                        if ((performance.now() - (onsetVI + adjForITI)) >= (rd[Value_Variable])) {
                            
                            // COR
                            if (tmpCOR_Target > COR) {
                                flagCOR_Target = 0;
                            }
                            if (flagCOR_Target == 1) {
                                if (!noLossSign) {
                                    flashRed();
                                }
                                //console.log("  COR required");
                                calcPoint();
                                return;
                            }
                            
                            SR(side);
                            srPhase1++;
                            
                            onsetVI = performance.now(); 
                            Value_Variable++;
                            FleshlerHoffman(VI_Target);
                        } else {
                            if (!noLossSign) {
                                flashRed();
                            }
                        }
                    } else {
                        // Phases 2 & 3
                        if (!noLossSign) {
                            flashRed();
                        }
                    }
                }
                calcPoint();
            }
            
            function checkAltVI(side) {
                if ((performance.now() - (onsetVI + adjForITI)) >= (rd[Value_Variable])) {
                
                    // COR
                    if (tmpCOR_Alt > COR) {
                        flagCOR_Alt = 0;
                    }
                    if (flagCOR_Alt == 1) {
                        if (!noLossSign) {
                            flashRed();
                        }
                        calcPoint();
                        return;
                    }
                    
                    SR(side);
                    if (!flagEndPhase2) {
                        srPhase2++;
                    } else {
                        srPhase3++;
                    }
                    
                    onsetVI = performance.now(); 
                    Value_Variable++;
                    FleshlerHoffman(VI_Alt);
                } else {
                    if (!noLossSign) {
                        flashRed();
                    }
                }
            }
            
            function AltResp(side) {
                altRespCount++;
                tmpAltRespCount++;
                EventMarker("02");

                // COR
                tmpCOR_Alt++;
                flagCOR_Target = 1;
                tmpCOR_Target = 0;

                respCost(side);
                
                if (!flagEndPhase1) {
                    // Phase 1
                    if (!noLossSign) {
                        flashRed();
                    }
                } else {
                    if (!flagEndPhase2) {
                        // Phase 2
                        if (flagInitSRPhase2) {
                            // Note Phase 2 automatically starts but VI schedule starts only after the first SR upon a single response, after meeting COR 
                            // COR
                            if (tmpCOR_Alt > COR) {
                                flagCOR_Alt = 0;
                            }
                            if (flagCOR_Alt == 1) {
                                if (!noLossSign) {
                                    flashRed();
                                }
                                //console.log("  COR required");
                                calcPoint();
                                return;
                            }
                            
                            SR(side);
                            onsetVI = performance.now();
                            flagInitSRPhase2 = 0;
                        } else {
                            checkAltVI(side);
                        }
                    } else {
                        // Phase 3
                        if (!altVIinPhase3) {
                            if (!noLossSign) {
                                flashRed();
                            }
                        } else {
                            checkAltVI(side);
                        }
                    }
                }
                calcPoint();
            }
            
            function EventMarker(event) {
                var str = event + ") " + Math.round(RealTime());
                arrEvents.push(str);
                numOfEvents++;
            }
            
            function SR(side) {
                totalSR++;
                totalGain = totalGain + gainWeight;
                adjForITI = 0; // Reset
                
                if (side == 0) { // 0 = Left, 1 = Right
                    EventMarker("17");
                    $('#lblGainLeft').show();
                    lblGainLeft.innerHTML = "+" + gainWeight;
                    $('#lblGainLeft').fadeOut(400);
                    
                    $('#imgStarLeft').show();
                    imgStarLeft.innerHTML = URL_image_star;
                    $('#imgStarLeft').fadeOut(400);
                } else {
                    EventMarker("18");
                    $('#lblGainRight').show();
                    lblGainRight.innerHTML = "+" + gainWeight;
                    $('#lblGainRight').fadeOut(400);
                    
                    $('#imgStarRight').show();
                    imgStarRight.innerHTML = URL_image_star;
                    $('#imgStarRight').fadeOut(400);
                }
                flashGreen();
            }
            
            function respCost(side) {
                if (side == 0) { // 0 = Left, 1 = Right
                    $('#lblLossLeft').show();
                    if (lossWeight == 0) {
                        if (noLossSign == 0) {
                            lblLossLeft.innerHTML = lossWeight;
                        } 
                    } else {
                        lblLossLeft.innerHTML = "-" + lossWeight;
                    }
                    $('#lblLossLeft').fadeOut(400);
                } else {
                    $('#lblLossRight').show();
                    if (lossWeight == 0) {
                        if (noLossSign == 0) {
                            lblLossRight.innerHTML = lossWeight;
                        } 
                    } else {
                        lblLossRight.innerHTML = "-" + lossWeight;
                    }
                    $('#lblLossRight').fadeOut(400);
                }
            }
            
            function flashRed() {
                barPoint.classList.add('flashRed');
                setTimeout(function(){
                  barPoint.classList.remove('flashRed');
                }, 400)
            }
            
            function flashGreen() {
                barPoint.classList.add('flashGreen');
                setTimeout(function(){
                  barPoint.classList.remove('flashGreen');
                }, 400)
            }
            
            function calcPoint() {
                totalLoss = (targetRespCount + altRespCount) * lossWeight;
                netGain = totalGain - totalLoss;
                
                if (netGain >= 0) {
                    barPoint.style.height = (netGain / pixelRatio) + "px";
                    barPoint.style.top = bottomPanel - netGain / pixelRatio + "px";
                    
                    lblNetGain.style.top = bottomPanel - netGain / pixelRatio - lblOffset + "px";
                    lblNetGain.innerHTML= netGain;
                    
                    lblBarPoint.style.top = bottomPanel + "px";
                } else {
                    barPoint.style.height = (-netGain / pixelRatio) + "px";
                    barPoint.style.top = bottomPanel + "px";
                    
                    lblNetGain.style.top = bottomPanel - (netGain / pixelRatio) + "px";
                    lblNetGain.innerHTML= netGain;
                    
                    lblBarPoint.style.top = bottomPanel - lblBarPointOffset * 2.5 + "px";
                }
                lblDollar.innerHTML = "US$ "+ (netGain * dollarPerPoint).toFixed(5);
            }

            function FleshlerHoffman(Parameter) {
                if (Value_Variable == n) {Value_Variable = 0; }
                if (Value_Variable == 0) {
                    v = Parameter * 1000;
                    n = Iterations;
                    rd.fill(0); // set 0s
                    vi.fill(0);
                    
                    for (var i = 1; i <= n; i++) {
                        if (i == n) {
                            vi[i] = Math.round(v * (1 + Math.log(n)));
                        } else {
                            vi[i] = Math.round(v * (1 + (Math.log(n)) + (n - i) * (Math.log(n - i)) - (n - i + 1) * Math.log(n - i + 1)));
                        }
                        do {
                            order = Math.abs(xorshift()) % n;
                        } while (rd[order] != 0);
                        
                        rd[order] = vi[i];
                    }
		            for (var a = 0; a <= n; a++) { Sumxser = Sumxser + rd[a]; }
		            if (Sumxser != (v * n)) { rd[0] = rd[0] + ((v * n) - Sumxser); }
		            Sumxser = 0;
                } 
            }

            function btnmov(btn, minX, maxX, minY, maxY) {
                
                var newLoc_X = new Array(2);
                var newLoc_Y = new Array(2);
                
                var blnTop = Boolean(true);
                var blnBottom = Boolean(true);
                var blnLeft = Boolean(true);
                var blnRight = Boolean(true);
                
                newLoc_X[0] = parseInt(btn.style.left, 10) - buttonMotionStep;
                newLoc_X[1] = parseInt(btn.style.left, 10) + buttonMotionStep;
                newLoc_Y[0] = parseInt(btn.style.top, 10) - buttonMotionStep;
                newLoc_Y[1] = parseInt(btn.style.top, 10) + buttonMotionStep;

                if (newLoc_X[0] < minX) blnLeft = false;
                if (newLoc_X[1] > maxX) blnRight = false;
                if (newLoc_Y[0] < minY) blnTop = false;
                if (newLoc_Y[1] > maxY) blnBottom = false;

                var dirs = Number(blnLeft) + Number(blnRight) + Number(blnTop) + Number(blnBottom);
                var rn = 0;
                
                // 2 possible directions
                if (dirs == 2) {
                    rn = (Math.abs(xorshift()) % 2); // 0-1
                    if (blnLeft) {
                        if (rn == 0) {
                            MoveLeft(btn);
                            return;
                        } else {
                            if (blnRight) {
                                MoveRight(btn);
                                return;
                            }
                            if (blnTop) {
                                MoveUp(btn);
                                return;
                            }
                            if (blnBottom) {
                                MoveDown(btn);
                                return;
                            }
                        }
                    }
                    
                    if (blnRight) {
                        if (rn == 0) {
                            MoveRight(btn);
                            return;
                        } else {
                            if (blnTop) {
                                MoveUp(btn);
                                return;
                            }
                            if (blnBottom) {
                                MoveDown(btn);
                                return;
                            }
                        }
                    }
                    
                    if (blnTop) {
                        if (rn == 0) {
                            MoveUp(btn);
                            return;
                        } else {
                            MoveDown(btn);
                            return;
                        }
                    }
                }
                
                //  3 possible directions
                if (dirs == 3) {
                    rn = (Math.abs(xorshift()) % 3); // 0-2
                    if (!blnLeft) {
                        switch (rn) {
                            case 0:
                                MoveRight(btn);
                                break;
                            case 1:
                                MoveUp(btn);
                                break;
                            case 2:
                                MoveDown(btn);
                                break;
                        }
                        return;
                    }
                    
                    if (!blnRight) {
                        switch (rn) {
                            case 0:
                                MoveLeft(btn);
                                break;
                            case 1:
                                MoveUp(btn);
                                break;
                            case 2:
                                MoveDown(btn);
                                break;
                        }
                        return;
                    }
                    
                    if (!blnTop) {
                        switch (rn) {
                            case 0:
                                MoveLeft(btn);
                                break;
                            case 1:
                                MoveRight(btn);
                                break;
                            case 2:
                                MoveDown(btn);
                                break;
                        }
                        return;
                    }
                    
                    if (!blnBottom) {
                        switch (rn) {
                            case 0:
                                MoveLeft(btn);
                                break;
                            case 1:
                                MoveRight(btn);
                                break;
                            case 2:
                                MoveUp(btn);
                                break;
                        }
                        return;
                    }
                }
                
                // 4 possible directions
                if (dirs == 4) {
                    rn = (Math.abs(xorshift()) % 4); // 0-3
                    switch (rn) {
                        case 0:
                            MoveLeft(btn);
                            break;
                        case 1:
                            MoveRight(btn);
                            break;
                        case 2:
                            MoveUp(btn);
                            break;
                        case 3:
                            MoveDown(btn);
                            break;
                    }
                    return;
                }
            }    

            function MoveLeft(btn) {
                 btn.style.left = (parseInt(btn.style.left, 10) - buttonMotionStep) + "px";
            }
            
            function MoveRight(btn) {
                btn.style.left = (parseInt(btn.style.left, 10) + buttonMotionStep) + "px";
            }

            function MoveUp(btn) {
                btn.style.top = (parseInt(btn.style.top, 10) - buttonMotionStep) + "px";
            }
            
            function MoveDown(btn) {
                btn.style.top = (parseInt(btn.style.top, 10) + buttonMotionStep) + "px";
            }

            function xorshift() {
                let t = x ^ (x << 11);
                x = y; y = z; z = w;
                return w = (w ^ (w >>> 19)) ^ (t ^ (t >>> 8)); 
            }
            
            function RealTime() {
                return performance.now() - startTime;
            }
            
            function SaveData() {
                lblMessage.innerHTML = "Please wait...";
                btnSaveData.style.display = "none";
                flagDuringSave = 1;
                flagSaveButtonClick = 1;
                
                $.ajax({
                    type: "POST",
                    url: URL_php_savedatafile,
                    data: {
                        "ID": ID,
                        "GROUP": GROUP,
                        "code": code,
                        "basePay": basePay,
                        "dtStart": dtStart,
                        "dtEnd": dtEnd,
                        "targetRespCount": targetRespCount,
                        "altRespCount": altRespCount,
                        "totalGain": totalGain,
                        "totalLoss": totalLoss,
                        "netGain": netGain,
                        "meanTargetRespPhase1": meanTargetRespPhase1,
                        "totalSR": totalSR,
                        "srPhase1": srPhase1,
                        "srPhase2": srPhase2,
                        "srPhase3": srPhase3,
                        "VI_Target": VI_Target,
                        "VI_Alt": VI_Alt,
                        "COR": COR,
                        "lossWeight": lossWeight,
                        "noLossSign": noLossSign,
                        "gainWeight": gainWeight,
                        "initPoint": initPoint,
                        "symbol": symbol,
                        "terminatePhase1": terminatePhase1,
                        "dollarPerPoint": dollarPerPoint,
                        "background": background,
                        "ITIlength": ITIlength,
                        "altVIinPhase3": altVIinPhase3,
                        "noPhase1": noPhase1,
                        "intervalPeriodLength": intervalPeriodLength,
                        "numIntervalsPhase1": numIntervalsPhase1,
                        "criterion": criterion,
                        "metCountCriterion": metCountCriterion,
                        "MinCountCriterion": MinCountCriterion,
                        "MaxCountCriterion": MaxCountCriterion,
                        "numIntervalsPhase3": numIntervalsPhase3,
                        "arrTargetRespCountPhase1": arrTargetRespCountPhase1,
                        "arrTargetRespCountPhase2": arrTargetRespCountPhase2,
                        "arrTargetRespCountPhase3": arrTargetRespCountPhase3,
                        "arrAltRespCountPhase1": arrAltRespCountPhase1,
                        "arrAltRespCountPhase2": arrAltRespCountPhase2,
                        "arrAltRespCountPhase3": arrAltRespCountPhase3,
                        "arrEvents": arrEvents
                    },
                    success: function(filecount) {
                        tickTock.terminate();
                        sessionStorage.setItem("filecount", filecount);
                        sessionStorage.setItem("ID", ID);
                        sessionStorage.setItem("GROUP", GROUP);
                        sessionStorage.setItem("code", code); 
                        sessionStorage.setItem("basePay", basePay);
                        sessionStorage.setItem("netGain", netGain); 
                        sessionStorage.setItem("dollarPerPoint", dollarPerPoint);

                        var dollar = netGain * dollarPerPoint + basePay;
                        dollar = dollar.toFixed(2); // Decimal points of 2 (string)
                        sessionStorage.setItem("dollar", dollar);
                        
                        function delay(msec){
                            return new Promise(function(resolve){
                                    setTimeout(resolve, msec);
                                });
                        }
                        async function wait(msec){
                            await delay(msec);
                            window.location.replace(URL_webpage_endofsession);
                        }
                        wait(500); // 0.5-s delay for having enough time to store data with sessionStorage.setItem

                    },
                    error: function() {
                        flagDuringSave = 0;
                    }
                })
            }
            
            function changeContext(phase) {
                if (background[phase] == 0) {
                    imgBeach.classList.add('appear');
                    imgDesert.classList.remove('appear');
                } else {
                    imgDesert.classList.add('appear');
                    imgBeach.classList.remove('appear');
                }
            }
            
            function removeObjectsExceptForHourglass() {
                leftPanel.style.display = 'none';
                rightPanel.style.display = 'none';
                scoreBoard.style.display = 'none';
                imgBeach.classList.remove('appear');
                imgDesert.classList.remove('appear');
                imgStarLeft.style.display = 'none';
                imgStarRight.style.display = 'none';
                lblGainLeft.style.display = 'none';
                lblGainRight.style.display = 'none';
                lblLossLeft.style.display = 'none';
                lblLossRight.style.display = 'none';
            }
            
            tickTock.onmessage = function() {
                if (flagTerminate) {
                    removeObjectsExceptForHourglass();
                    hourglass.classList.remove('appear');
                    window.location.replace(URL_page_terminated);
                } else {
                    if (RealTime() > terminatePhase1 && targetRespCount == 0 && altRespCount == 0) {
                        flagTerminate = 1;
                    }
                    
                    if (!flagEndSession) {
                        // ITI
                        if (flagITI) {
                            if (performance.now() - intervalOnsetITI >=  ITIlength) {
                                scoreBoard.style.display = 'block';
                                hourglass.classList.remove('appear');

                                // For button motion & bin
                                intervalOnsetMotion = performance.now();
                                if (flagInitPhase1) {
                                    changeContext(0);
                                } else {
                                    intervalOnsetPeriod = performance.now();
                                    
                                    if (!flagEndPhase1) {
                                        // Phase 1
                                        changeContext(0);
                                        if (targetSide == 0) {
                                            leftPanel.style.display = 'block';
                                        } else {
                                            rightPanel.style.display = 'block';
                                        }
                                    } else {
                                        leftPanel.style.display = 'block';
                                        rightPanel.style.display = 'block';
                                        if (!flagEndPhase2) {
                                            // Phase 2
                                            changeContext(1);
                                        } else {
                                            // Phase 3
                                            changeContext(2);
                                        }
                                    }
                                }
                                flagCOR_Target = 0;
                                flagCOR_Alt = 0;
                                flagITI = 0;
                                EventMarker("32");
                            }
                        } else {
                            // Button motion
                            if (performance.now() - intervalOnsetMotion >=  motionInterval) {
                                intervalOnsetMotion = performance.now();
                                
                                btnmov(btnLeft, btnLeftMinX, btnLeftMaxX, btnLeftMinY, btnLeftMaxY)
                                btnmov(btnRight, btnRightMinX, btnRightMaxX, btnRightMinY, btnRightMaxY)
                                
                                var rect = btnLeft.getBoundingClientRect();
                                imgStarLeft.style.left = (rect.left + starOffsetX) + "px";
                                imgStarLeft.style.top = (rect.top - starOffsetY) + "px";
                                lblGainLeft.style.left = (rect.left + gainOffsetX) + "px";
                                lblGainLeft.style.top = (rect.top - gainOffsetY) + "px";
                                lblLossLeft.style.left = (rect.left + lossOffsetX) + "px";
                                lblLossLeft.style.top = (rect.top + rect.height + lossOffsetY) + "px";
                                
                                rect = btnRight.getBoundingClientRect();
                                imgStarRight.style.left = (rect.left + starOffsetX) + "px";
                                imgStarRight.style.top = (rect.top - starOffsetY) + "px";
                                lblGainRight.style.left = (rect.left + gainOffsetX) + "px";
                                lblGainRight.style.top = (rect.top - gainOffsetY) + "px";
                                lblLossRight.style.left = (rect.left + lossOffsetX) + "px";
                                lblLossRight.style.top = (rect.top + rect.height + lossOffsetY) + "px";
                            }
                            
                            if (!flagInitPhase1) {

                                if (!flagEndPhase1) {
                                    // Phase 1
                                    if (performance.now() - intervalOnsetPeriod >=  intervalPeriodLength) {
                                        intervalOnsetPeriod = performance.now();
                                         
                                        arrTargetRespCountPhase1.push(tmpTargetRespCount);
                                        arrAltRespCountPhase1.push(tmpAltRespCount);
                                        tmpTargetRespCount = 0;
                                        tmpAltRespCount = 0;
                                        
                                        intervalCountPhase1++;
                                        if (intervalCountPhase1 < numIntervalsPhase1) {
                                            if (ITIlength > 0) {
                                                removeObjectsExceptForHourglass();
                                                hourglass.classList.add('appear');
                                                flagITI = 1;
                                                adjForITI = adjForITI + ITIlength;
                                                intervalOnsetITI = performance.now();
                                            }
                                        } else {
                                            flagEndPhase1 = 1;
                                            EventMarker("30");
                                            meanTargetRespPhase1 = (targetRespCount - 1) / numIntervalsPhase1; // -1 to exclude the first response
                                            Value_Variable = 0 // Reset for Phase 2
                                            
                                            if (ITIlength > 0) {
                                                removeObjectsExceptForHourglass();
                                                hourglass.classList.add('appear');
                                                flagITI = 1;
                                                adjForITI = 0; // Reset for Phase 2
                                                intervalOnsetITI = performance.now();
                                            } else {
                                                leftPanel.style.display = 'block';
                                                rightPanel.style.display = 'block';
                                                changeContext(1);
                                            }
                                        }
                                    }
                                } else {
                                    if (!flagEndPhase2) {
                                        // Phase 2
                                        if (performance.now() - intervalOnsetPeriod >=  intervalPeriodLength) {
                                            intervalOnsetPeriod = performance.now();
                                            
                                            arrTargetRespCountPhase2.push(tmpTargetRespCount);
                                            arrAltRespCountPhase2.push(tmpAltRespCount);
                                            
                                            var flagProceed = 0;
                                            if (arrTargetRespCountPhase2.length >= MaxCountCriterion) {
                                                flagProceed = 1;
                                            }
                                                
                                            if (tmpTargetRespCount <= (meanTargetRespPhase1 * criterion)) { // Changed from < to <= in case 0 mean target response in Phase 1
                                                criterionMetCount++;
                                                if (criterionMetCount >= metCountCriterion) {
                                                    flagProceed = 1;
                                                }
                                            } else {
                                                criterionMetCount = 0;
                                            }
                                            tmpTargetRespCount = 0;
                                            tmpAltRespCount = 0;
                                            
                                            if (arrTargetRespCountPhase2.length < MinCountCriterion) {
                                                flagProceed = 0;
                                            }
                                            
                                            if (flagProceed == 0) {
                                                if (ITIlength > 0) {
                                                    removeObjectsExceptForHourglass();
                                                    hourglass.classList.add('appear');
                                                    flagITI = 1;
                                                    adjForITI = adjForITI + ITIlength;
                                                    intervalOnsetITI = performance.now();
                                                }
                                            } else {
                                                flagEndPhase2 = 1;
                                                EventMarker("31");

                                                if (ITIlength > 0) {
                                                    removeObjectsExceptForHourglass();
                                                    hourglass.classList.add('appear');
                                                    flagITI = 1;
                                                    
                                                    if (!altVIinPhase3) { // 0 = No, 1 = Yes
                                                        adjForITI = 0; // Reset for Phase 3
                                                    } else {
                                                        adjForITI = adjForITI + ITIlength; // Continue Alt VI
                                                    }
                                                    
                                                    intervalOnsetITI = performance.now();
                                                } else {
                                                    changeContext(2);
                                                }
                                            }
                                        }
                                    } else {
                                        // Phase 3
                                        if (performance.now() - intervalOnsetPeriod >=  intervalPeriodLength) {
                                            intervalOnsetPeriod = performance.now();
                                            
                                            arrTargetRespCountPhase3.push(tmpTargetRespCount);
                                            arrAltRespCountPhase3.push(tmpAltRespCount);
                                            tmpTargetRespCount = 0;
                                            tmpAltRespCount = 0;
                                            
                                            intervalCountPhase3++;
                                            
                                            if (intervalCountPhase3 < numIntervalsPhase3) {
                                                if (ITIlength > 0) {
                                                    removeObjectsExceptForHourglass();
                                                    hourglass.classList.add('appear');
                                                    flagITI = 1;
                                                    adjForITI = adjForITI + ITIlength;
                                                    intervalOnsetITI = performance.now();
                                                }
                                            } else {
                                                // End of session
                                                EventMarker("99");
                                                removeObjectsExceptForHourglass();
                                                hourglass.classList.remove('appear');
                                                btnSaveData.style.display = 'block';
                                                lblMessage.style.display = 'block';
                                                lblMessage.innerHTML = 'You completed the game portion of this HIT. Please press PROCEED.';
                                                
                                                dtE = new Date();
                                                dtEnd.push(dtE.getFullYear());
                                                dtEnd.push(dtE.getMonth() + 1);
                                                dtEnd.push(dtE.getDate());
                                                dtEnd.push(dtE.getHours());
                                                dtEnd.push(dtE.getMinutes());
                                                dtEnd.push(dtE.getSeconds());
                                                
                                                code = Math.abs(xorshift());
                                                flagEndSession = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                            
                    } else {
                        if (flagSaveButtonClick) {
                            if (!flagDuringSave) {
                                lblMessage.innerHTML = 'Please click the button again';
                                btnSaveData.style.display = 'block';
                                flagSaveButtonClick = 0;
                            }
                        }
                    }
                }
            }

            function init() {
                // This is to minimize the likelihood of pressing the "Back page" button on browsers
                var flagBackpage1 = localStorage.getItem("flagBackpage1"); 
                if (flagBackpage1 == null) {
                    flagBackpage1 = 1;
                    localStorage.setItem("flagBackpage1", flagBackpage1); 
                } else {
                    window.location.replace(URL_page_backpage);
                }
                
                x = Math.round(performance.now()*1000);
                
                var id = sessionStorage.getItem("ID");
                var group = sessionStorage.getItem("GROUP");
                if (id == null) {
                    ID = -1;
                    GROUP = (Math.abs(xorshift()) % 4) + 1;
                    sessionStorage.setItem("ID", ID);
                    sessionStorage.setItem("GROUP", GROUP);
                } else {
                    ID = Number(id);
                    GROUP = Number(group);
                }

                // Group assignment
                switch (GROUP) {
                    case 1:
                        targetSide = 0;
                        lossWeight = 0;
                        noLossSign = 1; 
                        break;
                    case 2:
                        targetSide = 1;
                        lossWeight = 0;
                        noLossSign = 1; 
                        break;
                    case 3:
                        targetSide = 0;
                        lossWeight = 1;
                        break;
                    case 4:
                        targetSide = 1;
                        lossWeight = 1;
                        break;
                }

                totalGain = initPoint;
                netGain = totalGain - totalLoss;
                
                // Match the background image to the screen size
                document.body.style.minWidth = Width + "px";
                document.body.style.minHeight = Height + "px";
                
                // Set object parameters
                hourglass.style.left = (Width - hourglassWidth)/ 2 + "px";
                hourglass.style.top = (Height - hourglassHeight)/ 2 + "px";
                
                lblMessage.style.display = "none";
                btnSaveData.style.display = "none";
                
                var rectLeftWorkplace = leftWorkplace.getBoundingClientRect();
                leftPanel.style.left = (Width - rectLeftWorkplace.width)/ 2 - offsetMidline +"px";
                leftPanel.style.top = (Height - rectLeftWorkplace.height)/ 2 + "px";
                
                var rectRightWorkplace = rightWorkplace.getBoundingClientRect();
                rightPanel.style.left = (Width - rectRightWorkplace.width)/ 2 + offsetMidline + "px";
                rightPanel.style.top = (Height - rectRightWorkplace.height)/ 2 + "px";
                
                var rectBtnLeft = btnLeft.getBoundingClientRect();
                btnLeft.style.left =  rectLeftWorkplace.left + (rectLeftWorkplace.width - rectBtnLeft.width) / 2 + "px";
                btnLeft.style.top = rectLeftWorkplace.top + (rectLeftWorkplace.height - rectBtnLeft.height) / 2 + "px";
                
                var rectBtnRight = btnRight.getBoundingClientRect();
                btnRight.style.left = rectRightWorkplace.left + (rectRightWorkplace.width - rectBtnRight.width) / 2 + "px";
                btnRight.style.top = rectRightWorkplace.top + (rectRightWorkplace.height - rectBtnRight.height) / 2 + "px";
            
                btnLeftMinX =  parseInt(btnLeft.style.left, 10) - adj;
                btnLeftMaxX = parseInt(btnLeft.style.left, 10) + adj;
                btnLeftMinY = parseInt(btnLeft.style.top, 10) - adj;
                btnLeftMaxY = parseInt(btnLeft.style.top, 10) + adj;
                btnRightMinX = parseInt(btnRight.style.left, 10) - adj;
                btnRightMaxX = parseInt(btnRight.style.left, 10) + adj;
                btnRightMinY = parseInt(btnRight.style.top, 10) - adj;
                btnRightMaxY = parseInt(btnRight.style.top, 10) + adj;
                
                // Symbols on reponse buttons
                switch (Math.abs(xorshift()) % 2) {
                    case 0:
                        btnLeft.innerHTML = URL_image_heart;
                        btnRight.innerHTML = URL_image_club;
                        symbol = 0;
                        break;
                    case 1:
                        btnLeft.innerHTML = URL_image_club;
                        btnRight.innerHTML = URL_image_heart;
                        symbol = 1;
                        break;
                }

                var rect = btnLeft.getBoundingClientRect();
                imgStarLeft.style.left = "0px";
                imgStarLeft.style.top = "0px";
                imgStarRight.style.left = "0px";
                imgStarRight.style.top = "0px";
                
                lblGainLeft.style.left = "0px";
                lblGainLeft.style.top = "0px";
                lblGainLeft.style.color = "#00ff00"; // Green
                lblGainRight.style.left = "0px";
                lblGainRight.style.top = "0px";
                lblGainRight.style.color = "#00ff00"; // Green
                
                lblLossLeft.style.left = "0px";
                lblLossLeft.style.top = "0px";
                lblLossLeft.style.color = "#ff0000"; // Red
                
                lblLossRight.style.left = "0px";
                lblLossRight.style.top = "0px";
                lblLossRight.style.color = "#ff0000"; // Red
                
                var rectPanel;
                if (targetSide == 0) {
                    rectPanel = leftPanel.getBoundingClientRect();
                    bottomPanel = rectPanel.top + rectLeftWorkplace.height;
                    rightPanel.style.display = 'none'; // Left on
                } else {
                    rectPanel = rightPanel.getBoundingClientRect();
                    bottomPanel = rectPanel.top + rectRightWorkplace.height;
                    leftPanel.style.display = 'none'; // Right on
                }

                var rectBarPoint = barPoint.getBoundingClientRect();
                barPoint.style.height = netGain / pixelRatio + "px";
                barPoint.style.left = (Width - rectBarPoint.width) / 2 + "px";
                barPoint.style.top = bottomPanel - netGain / pixelRatio + "px";
                
                lblBarPoint.style.left = (Width - rectBarPoint.width) / 2 + "px";
                lblBarPoint.style.top = bottomPanel + "px";
                lblBarPoint.innerHTML = "POINTS";
                
                var rectLblBarPoint = lblBarPoint.getBoundingClientRect();
                lblDollar.style.left = rectLblBarPoint.right + 50 + "px";
                lblDollar.style.top = bottomPanel + "px";
                lblDollar.innerHTML = "US$ "+ (netGain * dollarPerPoint).toFixed(5);
                
                rectBarPoint = barPoint.getBoundingClientRect();
                lblNetGain.style.left = (Width - rectBarPoint.width) / 2 + "px";
                lblNetGain.style.top = bottomPanel - netGain / pixelRatio - 25 + "px";
                lblNetGain.innerHTML = netGain;  
                
                // Set Background images
                var BG = Math.abs(xorshift()) % 1;
                switch (BG){
                    case 0:
                        // AAA
                        background[0] = 0;
                        background[1] = 0;
                        background[2] = 0;
                        break;
                }
                
                if (!noPhase1) { // 0 = No, 1 = Yes)
                    FleshlerHoffman(VI_Target);
                } else {
                    FleshlerHoffman(VI_Alt);
                }
                
                leftWorkplace.style.zIndex = 0;
                rightWorkplace.style.zIndex = 1;
                btnLeft.style.zIndex = 2;
                btnRight.style.zIndex = 3;
                
                dtSt = new Date();
                dtStart.push(dtSt.getFullYear());
                dtStart.push(dtSt.getMonth() + 1);
                dtStart.push(dtSt.getDate());
                dtStart.push(dtSt.getHours());
                dtStart.push(dtSt.getMinutes());
                dtStart.push(dtSt.getSeconds());

                startTime = performance.now();
                if (ITIlength > 0) {
                    removeObjectsExceptForHourglass();
                    hourglass.classList.add('appear');
                    flagITI = 1;
                    intervalOnsetITI = performance.now();
                } else {
                    changeContext(0);
                    intervalOnsetMotion = performance.now();
                }
                tickTock.postMessage("start");
            }
            init();
            
        </script>
    </body>
</html> 
