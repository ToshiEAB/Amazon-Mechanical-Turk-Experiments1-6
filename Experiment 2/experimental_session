<!DOCTYPE html>
<html lang="ja">
    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <meta charset="utf-8">
        <style>
        
            #workspace {
                margin : 0 auto;
                width: 350px;
                height: 350px;
                border-radius: 5px;
                border: solid 3px #800000;
                background-color: #fea636;
                opacity: 0.2;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
        
            #btnTarget {
                margin : 0 auto;
                width: 100px;
                height: 100px;
                padding: 3px;
                border-radius: 5px;
                border: solid 1px #000000;
		        text-align: center;
                color: white;
		        font-weight: bold;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
           }

            #btnTarget:hover {
                opacity: 0.8;
           }

            #barPoint {
                margin : 0 auto;
                width: 50px;
                border: solid 1px #000000;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            
            #barPoint.normal {
                background: #d3d3d3;
            }

            #barPoint.flashRed {
                background: #ff0000;
            }
            
            #barPoint.flashGreen {
                background: #00ff00;
            }
            
            #lblBarPoint {
                margin : 0 auto;
                font-size: 12pt;
                font-weight: bold;
                width: 50px;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            
            #lblDollar {
                margin : 0 auto;
                font-size: 12pt;
                width: 200px;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            
            #lblNetGain {
                margin : 0 auto;
                font-size: 14pt;
                width: 50px;
                text-align: center;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }

            #imgStar {
                margin : 0 auto;
                font-size: 18pt;
                width: 200px;
                height: 200px;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }

            #lblGain {
                margin : 0 auto;
                font-size: 18pt;
                width: 50px;
                text-align: center;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            
            #lblLoss {
                margin : 0 auto;
                font-size: 18pt;
                width: 50px;
                text-align: center;
                position: absolute;
                user-select: none; 
                -ms-user-select: none;
                -moz-user-select: none;
                -webkit-user-select: none;
            }
            
            .Container {
                width: 60%;
                position: relative;
                left: 250px;
            }
            
            html,body{
                width: 100%;
                height: 100%;
            }
            
            #imgBeach {
                width: 100%;
                height: 100%;
                /* ***** This assumes that you uploaded "beach.jpg" to the "images" directory under the directory for the Luxech theme*/
                background: url(/wp-content/themes/luxech/images/beach.jpg); 
                background-size: cover;
                background-repeat: no-repeat;
                display: none;
            }
            
            #imgBeach.appear {
                display: block;
            }
            
            #imgDesert {
                width: 100%;
                height: 100%;
                /* ***** This assumes that you uploaded "desert.jpg" to the "images" directory under the directory for the Luxech theme*/
                background: url(/wp-content/themes/luxech/images/desert.jpg); 
                background-size: cover;
                background-repeat: no-repeat;
                display: none;
            }
            
            #imgDesert.appear {
                display: block;
            }
            
        </style>
    </head>
    <body>
        
        <div id="imgBeach"></div>
        <div id="imgDesert"></div>

        <div id="workspace"></div>
        <div id="btnTarget" onmousedown="return false"></div>
        <div id="imgStar"></div>
        <div id="lblGain"></div>
        <div id="lblLoss"></div>
        <div id="barPoint" class="normal"></div>
        <div id="lblBarPoint"></div>
        <div id="lblDollar"></div>
        <div id="lblNetGain"></div>
        
        <div class="Container">
            <p><br></p>
            <p><br></p>
            <p><br></p>
            <p><span id="lblMessage" style="font-size:16px;margin-left:15%;margin-right:10%;"></span></p>
            <div><input id="btnSaveData" type="button" style="width:180px;background-color:yellow;padding:10px;font-size:24px;margin-left:40%;margin-right:10%;" value="Proceed"></div>
            <p><br></p>
        </div>
        

        <script>
            "use strict";
            
            // URLs (***** Change the following URLs to match your domain name. Also change the URLs in the CSS codes above if any)
            const URL_page_endofsession = 'https://_________.com/endofsession/'; // Page immediately after session
            const URL_page_terminated = 'https://_________.com/terminated/'; // Page when no response occurs in the first X sec
            const URL_page_backpage = 'https://_________.com/backpage/'; // Page when trying to re-enter the session page
            
            // The following URL assumes that you uploaded relevant files to the "images" directory under the directory for the Luxech theme
            const URL_image_heart = '<img src ="/wp-content/themes/luxech/images/heart.png">'; 
            const URL_image_club = '<img src ="/wp-content/themes/luxech/images/club.png">'; 
            const URL_image_star = '<img src ="/wp-content/themes/luxech/images/star_pt.png">';
            
            // The following URL assumes that you uploaded relevant files to the directory for the Luxech theme
            const URL_php_savedatafile = '/wp-content/themes/luxech/SaveDataFile.php';
            
            // File name
            //var filename = 0;
            
            const basePay = 0.5; // $0.50
            
            // Completion code
            var code = 0;

            // Independe variable
            const VIvalue = 2.02;
            const minIRI = 0; // in msec
            const VTvalue = 2; // in sec
            const FTvalue = 2000;
            const DROvalue = 1000; // in ms
            var lossWeight = 0; // Randomly selected
            const gainWeight = 100;
            const intPoint = 100;
            var symbol = 0; // 0: heart, 1: club
            const terminatePhase1 = 30000; // in ms
            const dollarPerPoint = 0.00005; // New
            var background = Array(3);
            background.fill(0);

            // Dependent variables
            var dtStart = [];
            var dtEnd = [];
            var respCount = 0;
            var srCount = 0;
            var totalGain = 0;
            var totalLoss = 0;
            var netGain = 0;
            
            var srPhase1 = 0;
            var srPhase3 = 0;

            // Intervals
            const intervalPeriodLength = 12000; // in ms This will be 12000
            const intervalMult = 15; // Phase 1 (Training) 
            const criterion = 100000; //0.8; // 0.8 for 80% of responding in Phase 1
            const metCountCriterion = 15; // Phase 2 (EXT)
            const reinsIntervalMult = 0; // Phase 3 (Skipped)

            // Arrays
            var arrBLRespCount = Array(intervalMult);
            arrBLRespCount.fill(0);
            var arrEXTRespCount = [];
            var arrReinsRespCount = [];

            // Events
            var numOfEvents = 0;
            var arrEvents = [];
            
            // List of events:
            // 01: Response on btnTarget
            // 02: Response on workspace
            // 03: Response on lblGain
            // 04: Response on lblLoss
            // 05: Response on barPoint
            // 06: Response on lblBarPoint
            // 07: Response on lblNetGain
            // 08: Response on background
            // 09: SR
            // 10: EXT onset
            // 11: Reinstatement onset
            // 12: Response on lblDollar
            // 99: End of session
            
            // Thread
            const thread = `
                onmessage = function timer() {
                    postMessage("e"); 
                    setTimeout(timer, 10); }
            `;
            const blob = new Blob([thread]);
            const blobURL = URL.createObjectURL(blob);
            const tickTock = new Worker(blobURL); 

            // Objects
            var workspace = document.getElementById('workspace');
            var btnTarget = document.getElementById('btnTarget');
            var imgStar= document.getElementById('imgStar');
            var lblGain = document.getElementById('lblGain'); 
            var lblLoss = document.getElementById('lblLoss');
            var barPoint= document.getElementById('barPoint');
            var lblBarPoint= document.getElementById('lblBarPoint');
            var lblDollar= document.getElementById('lblDollar');
            var lblNetGain= document.getElementById('lblNetGain');
            var lblMessage= document.getElementById('lblMessage');
            var btnSaveData= document.getElementById('btnSaveData');
            
            var imgBeach = document.getElementById("imgBeach");
            var imgDesert = document.getElementById("imgDesert");

            // Screen size
            const scWidth = window.parent.screen.width;
            const scHeight = window.parent.screen.height - 200;
            
            // workspace
            const workspaceLocX = (scWidth - workspace.clientWidth) / 2;
            const workspaceLocY = (scHeight - workspace.clientHeight) / 2;

            // Star
            const starOffsetX = -50;
            const starOffsetY = 200;
            
            // Point above target button
            const gainOffsetX = 15;
            const gainOffsetY = 120;
            
            // Point below target button
            const lossOffsetX = 25;
            const lossOffsetY = 10;

            // Button-related variables
            const buttonSize = btnTarget.clientWidth; 
            const motionInterval = 200; // in ms
            const motionRange = 1.2;
            const buttonMotionStep = buttonSize / 5;
            
            const btnCenterX = (scWidth - buttonSize) / 2;
            const btnCenterY = (scHeight - buttonSize) / 2;
            const adj = buttonSize * motionRange;
            const boundaryMinX = btnCenterX - adj;
            const boundaryMaxX = btnCenterX + adj;
            const boundaryMinY = btnCenterY - adj;
            const boundaryMaxY = btnCenterY + adj;
            
            // Bar point
            const barLoc = workspaceLocX - 100;
            const barOffset = workspaceLocY + workspace.clientHeight + 5;
            const lblLoc = barLoc;
            const lblOffset = 30;
            const pixelRatio = 50;
            const lblBarPointOffset = 10;
            
            // // Button for saving data
            // const btnSaveButtonWidth = btnSaveData.clientWidth;
            // const btnSaveButtonHeight = btnSaveData.clientHeight;
            // const btnSaveButtonCenterX = (scWidth - btnSaveButtonWidth) / 2;
            // const btnSaveButtonCenterY = scHeight - 100;
            
            // // Message
            // const lblMessageCenterX = (scWidth - lblMessage.clientWidth) / 2;
            // const lblMessageCenterY = (scHeight - lblMessage.clientHeight) / 2 - 150;
            
            // Time-related variable
            var startTime = 0;
            var intervalOnsetMotion = 0;
            var intervalOnsetPeriod = 0;
            var onsetVT = 0;
            var onsetDRO = 0;

            // Flags
            var initSR = 1; 
            var extFlag = 0;
            var reinsFlag = 0;
            var flagDRO = 0;
            var flagEndSession = 0;
            var flagSaveButtonClick = 0;
            var flagDuringSave = 0;
            var flagTerminate = 0;

            // Miscellaneous
            var dtSt = 0;
            var dtE = 0;
            //var curResp = 0; // For VR
            var onsetVI = 0; // For VI
            var tempRespCount = 0;
            var respCountPerInterval = 0;
            var indexBLRespCount = 0;
            var criterionMetCount = 0;
            var reinsIntervalCount = 0;
            var noLossSign = 0; // Just for "0"
            
            // Fleshler & Hoffman
            // VR
            var Value_Variable = 0;
            var v = 0;
            var n = 0;
            var order = 0;
            var Iteration_Variable = 0;
            var Iterations = 10;
            var rd = Array(Iterations + 1);
            var vi= Array(Iterations + 1);
            var Sumxser = 0;
            
            // VT
            var Value_Variable_2 = 0;
            var v_2 = 0;
            var n_2 = 0;
            var order_2 = 0;
            var Iteration_Variable_2 = 0;
            var Iterations_2 = 10;
            var rd_2 = Array(Iterations_2 + 1);
            var vi_2 = Array(Iterations_2 + 1);
            var Sumxser_2 = 0;
            
            // xorshift RNG
            var x = 123456789;
            var y = 362436069;
            var z = 521288629;
            var w = 88675123;
            
            function xorshift() {
                let t = x ^ (x << 11);
                x = y; y = z; z = w;
                return w = (w ^ (w >>> 19)) ^ (t ^ (t >>> 8)); 
            }
            
            function bringToFlont(id) {
                var v = $('#' + id);
                v.appendTo(v.parent());
            }
            
            function EventMarker(event) {
                var str = event + ") " + Math.round(RealTime());
                arrEvents.push(str);
                numOfEvents++;
            }
            
            function RealTime() {
                return performance.now() - startTime;
            }
            
            tickTock.onmessage = function() {
                if (flagTerminate) {
                    workspace.style.display = "none";
                    btnTarget.style.display = "none";
                    imgStar.style.display = "none";
                    lblGain.style.display = "none"; 
                    lblLoss.style.display = "none";
                    barPoint.style.display = "none";
                    lblBarPoint.style.display = "none";
                    lblDollar.style.display = "none";
                    lblNetGain.style.display = "none";
                            
                    window.location.replace(URL_page_terminated);
                } else {
                    if (RealTime() > terminatePhase1 && respCount == 0) {
                        // Terminate session
                        flagTerminate = 1;
                    }
                    
                    if (!flagEndSession) {
                        // Button motion
                        bringToFlont("btnTarget");
                        if (performance.now() - intervalOnsetMotion >=  motionInterval) {
                            intervalOnsetMotion = performance.now();
                            
                            btnmov(btnTarget, boundaryMinX, boundaryMaxX, boundaryMinY, boundaryMaxY);
                        
                            var rect = btnTarget.getBoundingClientRect();
                            lblGain.style.left = (rect.left + gainOffsetX) + "px";
                            lblGain.style.top = (rect.top - gainOffsetY) + "px";
                            
                            imgStar.style.left = (rect.left + starOffsetX) + "px";
                            imgStar.style.top = (rect.top - starOffsetY) + "px";
                        
                            lblLoss.style.left = (rect.left + lossOffsetX) + "px";
                            lblLoss.style.top = (rect.top + rect.height + lossOffsetY) + "px";
                        }
                        
                        if (!initSR) {
                            if (!extFlag) {
                                // BL period
                                if (performance.now() - intervalOnsetPeriod >=  intervalPeriodLength) {
                                    intervalOnsetPeriod = performance.now();
                                     
                                    arrBLRespCount[indexBLRespCount] = tempRespCount;
                                    //console.log(arrBLRespCount[indexBLRespCount]);
                                    indexBLRespCount++;
                                    tempRespCount = 0;
                                }   
                                
                                if (indexBLRespCount >= intervalMult) {
                                    EventMarker("10");
                                    extFlag = 1;
                                    respCountPerInterval = respCount / intervalMult;
                                    
                                    if (background[1] == 0) {
                                        imgBeach.classList.add('appear');
                                        imgDesert.classList.remove('appear');
                                    } else {
                                        imgDesert.classList.add('appear');
                                        imgBeach.classList.remove('appear');
                                    }
                                    
                                    //console.log("EXT period started");
                                }
                            } else {
                                if (!reinsFlag) {
                                    // EXT period
                                    if (performance.now() - intervalOnsetPeriod >=  intervalPeriodLength) {
                                        intervalOnsetPeriod = performance.now();
                                        
                                        arrEXTRespCount.push(tempRespCount);
                                        //console.log(arrEXTRespCount[arrEXTRespCount.length - 1]);
                                            
                                        if (tempRespCount < (respCountPerInterval * criterion)) {
                                            criterionMetCount++;
                                            //console.log("Criterion-met count: " + criterionMetCount);
                                            if (criterionMetCount >= metCountCriterion) {
                                                reinsFlag = 1;
                                                
                                                onsetDRO = performance.now();
                                                flagDRO = 1; // Skip VT-link for the first DRO reinforcer (Added on 2020-6-17)
                                                
                                                EventMarker("11");
                                                onsetVT = performance.now();
                                                
                                                if (background[2] == 0) {
                                                    imgBeach.classList.add('appear');
                                                    imgDesert.classList.remove('appear');
                                                } else {
                                                    imgDesert.classList.add('appear');
                                                    imgBeach.classList.remove('appear');
                                                }
                                                
                                                //console.log("Reinstatement period started");
                                                //console.log(rd_2[Value_Variable_2]);
                                            }
                                        } else {
                                            criterionMetCount = 0;
                                            //console.log("Criterion Unmet");
                                        }
                                        tempRespCount = 0;
                                    }
                                } else {
                                   // End of session
                                            EventMarker("99");
                                            //console.log("End of session");
                                            
                                            imgBeach.classList.remove('appear');
                                            imgDesert.classList.remove('appear');
                                            
                                            dtE = new Date();
                                            dtEnd.push(dtE.getFullYear());
                                            dtEnd.push(dtE.getMonth() + 1);
                                            dtEnd.push(dtE.getDate());
                                            dtEnd.push(dtE.getHours());
                                            dtEnd.push(dtE.getMinutes());
                                            dtEnd.push(dtE.getSeconds());
                                            
                                            // Make all objects invisible except for btnSaveData & lblMessage
                                            workspace.style.display = "none";
                                            btnTarget.style.display = "none";
                                            imgStar.style.display = "none";
                                            lblGain.style.display = "none";
                                            lblLoss.style.display = "none";
                                            barPoint.style.display = "none";
                                            lblBarPoint.style.display = "none";
                                            lblDollar.style.display = "none";
                                            lblNetGain.style.display = "none";
                                            btnSaveData.style.display = "block";
                                            lblMessage.style.display = "block";
                                            lblMessage.innerHTML = "You completed the game portion of this HIT. Please press PROCEED.";
                                            
                                            // Generate a completion code
                                            var count = Math.floor((100 * Math.random(Math.random() * (performance.now() / 3333)))) + 1;
                                            for (var i = 0; i < count; ++i) {
                                                xorshift();
                                            }
                                            code = xorshift();
                                            if (code < 0) code *= -1;
    
                                            flagEndSession = 1;
                                    
                                }
                            }
                        }
                    } else {
                        if (flagSaveButtonClick) {
                            if (!flagDuringSave) {
                                lblMessage.innerHTML = "Please click the button again";
                                btnSaveData.style.display = "block";
                                flagSaveButtonClick = 0;
                            }
                        }
                    }
                }
            }
            tickTock.postMessage("start");

            (function() {
                btnTarget.addEventListener('mousedown',function() {
                    EventMarker("01");
                    targetResp();
                });

                workspace.addEventListener('mousedown',function() {
                    EventMarker("02");
                });

                lblGain.addEventListener('mousedown',function() {
                    EventMarker("03");
                });

                lblLoss.addEventListener('mousedown',function() {
                    EventMarker("04");
                });

                barPoint.addEventListener('mousedown',function() {
                    EventMarker("05");
                });

                lblBarPoint.addEventListener('mousedown',function() {
                    EventMarker("06");
                });

                lblNetGain.addEventListener('mousedown',function() {
                    EventMarker("07");
                });
                
                // Backgrounds
                $('html').click(function(e) {
                    if(e.target.tagName == 'HTML') {
                        EventMarker("08");
                    }
                });
                imgBeach.addEventListener('mousedown',function() {
                    EventMarker("08");
                });
                imgDesert.addEventListener('mousedown',function() {
                    EventMarker("08");
                });
                
                
                lblDollar.addEventListener('mousedown',function() {
                    EventMarker("12"); // New
                });
                
                btnSaveData.addEventListener('mousedown',function() {
                    SaveData();
                });
            })();
            
            function targetResp() {
                respCount++;
                tempRespCount++;
                
                //console.log(respCount);
                
                if (initSR) {
                    srCount++;
                    totalGain = totalGain + gainWeight;
                    
                    EventMarker("09");
                    SR();
                    respCost();
                    flashGreen();
                    //console.log("Phase 1 started");
                    intervalOnsetPeriod = performance.now();
                    onsetVI = performance.now(); // Added for VI
                    tempRespCount = 0;
                    initSR = 0;
                    
                } else {
                    if (reinsFlag) {
                        onsetDRO = performance.now();
                        //console.log("DRO timer reset");
                    }
                
                    if (!extFlag) {
                        // Phase 1
                        //curResp++;
                        if ((performance.now() - onsetVI) >= (rd[Value_Variable] + minIRI)) {
                            srCount++;
                            totalGain = totalGain + gainWeight;
                            
                            srPhase1++;
        
                            EventMarker("09");
                            SR();
                            respCost();
                            flashGreen();
                            
                            //curResp = 0;
                            onsetVI = performance.now(); // Added for VI
                            Value_Variable++;
                            FleshlerHoffman_VI(VIvalue);
                        } else {
                            respCost();
                            if (lossWeight != 0) {
                                flashRed();
                            }
                        }
                    } else {
                        respCost();
                        if (lossWeight != 0) {
                            flashRed();
                        }
                    }
                }
                
                calcPoint();
            }
            
            function SR() {
                $('#lblGain').show();
                lblGain.innerHTML = "+" + gainWeight;
                $('#lblGain').fadeOut(400);
                
                $('#imgStar').show();
                imgStar.innerHTML = URL_image_star;
                $('#imgStar').fadeOut(400);
            }
            
            function respCost() {
                $('#lblLoss').show();
                if (lossWeight == 0) {
                    if (noLossSign == 0) {
                        lblLoss.innerHTML = lossWeight;
                    } 
                } else {
                    lblLoss.innerHTML = "-" + lossWeight;
                }
                $('#lblLoss').fadeOut(400);
            }
            
            function flashRed() {
                barPoint.classList.add('flashRed');
                setTimeout(function(){
                  barPoint.classList.remove('flashRed');
                }, 400)
            }
            
            function flashGreen() {
                barPoint.classList.add('flashGreen');
                setTimeout(function(){
                  barPoint.classList.remove('flashGreen');
                }, 400)
            }
            
            function calcPoint() {
                totalLoss = respCount * lossWeight;
                netGain = totalGain - totalLoss;
                
                if (netGain >= 0) {
                    barPoint.style.height = (netGain / pixelRatio) + "px";
                    barPoint.style.top = (barOffset - (netGain / pixelRatio)) + "px";
                    
                    lblNetGain.style.top = (barOffset - (netGain / pixelRatio) - lblOffset) + "px";
                    lblNetGain.innerHTML= netGain;
                    
                    lblBarPoint.style.top = (barOffset + lblBarPointOffset) + "px";
                } else {
                    barPoint.style.height = (-netGain / pixelRatio) + "px";
                    barPoint.style.top = barOffset + "px";
                    
                    lblNetGain.style.top = (barOffset - (netGain / pixelRatio)) + "px";
                    lblNetGain.innerHTML= netGain;
                    
                    lblBarPoint.style.top = (barOffset - lblBarPointOffset * 2.5) + "px";
                }
                lblDollar.innerHTML = "US$ "+ (netGain * dollarPerPoint).toFixed(5);
            }
  
            function init() {
                // This is to minimize the likelihood of pressing the "Back page" button on browsers
                var flagBackpage1 = localStorage.getItem("flagBackpage1"); // Stricter
                if (flagBackpage1 == null) {
                    flagBackpage1 = 1;
                    localStorage.setItem("flagBackpage1", flagBackpage1); // Stricter
                } else {
                    window.location.replace(URL_page_backpage);
                }
                
               
                // Just to increase randomness
                x = Math.round(performance.now()*1000);
                
                totalGain = intPoint;
                netGain = totalGain - totalLoss;

                workspace.style.left = workspaceLocX + "px";
                workspace.style.top = workspaceLocY + "px";

                btnTarget.style.left = btnCenterX + "px";
                btnTarget.style.top = btnCenterY + "px";
                
                var rect = btnTarget.getBoundingClientRect();
                lblGain.style.left = (rect.left + gainOffsetX) + "px";
                lblGain.style.top = (rect.top - gainOffsetY) + "px";
                lblGain.style.color = "#00ff00"; // Green
                
                imgStar.style.left = (rect.left + starOffsetX) + "px";
                imgStar.style.top = (rect.top - starOffsetY) + "px";
                
                lblLoss.style.left = (rect.left + lossOffsetX) + "px";
                lblLoss.style.top = (rect.top + rect.height + lossOffsetY) + "px";
                lblLoss.style.color = "#ff0000"; // Red
                
                barPoint.style.height = (netGain / pixelRatio) + "px";
                barPoint.style.left = barLoc + "px";
                barPoint.style.top = (barOffset - (netGain / pixelRatio)) + "px";
                
                lblBarPoint.style.left = barLoc + "px";
                lblBarPoint.style.top = (barOffset + lblBarPointOffset) + "px";
                lblBarPoint.innerHTML = "POINTS";
                
                var lblBarLoc = lblBarPoint.getBoundingClientRect();
                lblDollar.style.left = lblBarLoc.right + 50 + "px";
                lblDollar.style.top = (barOffset + lblBarPointOffset) + "px";
                lblDollar.innerHTML = "US$ "+ (netGain * dollarPerPoint).toFixed(5);
                
                lblNetGain.style.left = lblLoc + "px";
                lblNetGain.style.top = (barOffset - (netGain / pixelRatio) - lblOffset) + "px";
                lblNetGain.innerHTML= netGain;
                
                btnSaveData.style.display = "none";
                
                lblMessage.style.display = "none";
                
                switch (Math.floor((2 * Math.random(Math.random() * (performance.now() / 3333)))) + 1){
                    case 1:
                        btnTarget.innerHTML = URL_image_heart;
                        symbol = 0;
                        break;
                    case 2:
                        btnTarget.innerHTML = URL_image_club;
                        symbol = 1;
                        break;
                }
                
                //var type = Math.floor((4 * Math.random(Math.random() * (performance.now() / 3333)))) + 1;
                var type = 1;
                switch (type) {
                    case 1:
                        lossWeight = 0;
                        noLossSign = 1; 
                        break;
                    case 2:
                        lossWeight = 0;
                        break;
                    case 3:
                        lossWeight = 1;
                        break;
                    case 4:
                        lossWeight = 5;
                        break;
                    case 5:
                        lossWeight = 10;
                        break;
                }
                
                var BG = Math.floor((4 * Math.random(Math.random() * (performance.now() / 3333)))) + 1;
                switch (BG){
                    case 1:
                        // AA-
                        background[0] = 0;
                        background[1] = 0;
                        background[2] = 0;
                        break;
                    case 2:
                        // BB-
                        background[0] = 1;
                        background[1] = 1;
                        background[2] = 0;
                        break;
                    case 3:
                        // AB-
                        background[0] = 0;
                        background[1] = 1;
                        background[2] = 0;
                        break;
                    case 4:
                        // BA-
                        background[0] = 1;
                        background[1] = 0;
                        background[2] = 0;
                        break;
                }
                
                
                if (background[0] == 0) {
                    imgBeach.classList.add('appear');
                    imgDesert.classList.remove('appear');
                } else {
                    imgDesert.classList.add('appear');
                    imgBeach.classList.remove('appear');
                }


                FleshlerHoffman_VI(VIvalue);
                // for (var i = 0; i < 10; i++) {
                //     console.log(rd[i]);
                // }

                FleshlerHoffman_VT(VTvalue);
                // for (var i = 0; i < 10; i++) {
                //     console.log(rd_2[i]);
                // }
                
                dtSt = new Date();
                dtStart.push(dtSt.getFullYear());
                dtStart.push(dtSt.getMonth() + 1);
                dtStart.push(dtSt.getDate());
                dtStart.push(dtSt.getHours());
                dtStart.push(dtSt.getMinutes());
                dtStart.push(dtSt.getSeconds());
                
                startTime = performance.now();
                intervalOnsetMotion = startTime;
            }
            init();

            function SaveData() {
                lblMessage.innerHTML = "Please wait...";
                btnSaveData.style.display = "none";
                flagDuringSave = 1;
                flagSaveButtonClick = 1;
                
                // Calling a PHP function
                $.ajax({
                    type: "POST",
                    url: URL_php_savedatafile,
                    data: {
                        //"filename": filename,
                        "code": code,
                        "basePay": basePay,
                        "dtStart": dtStart,
                        "dtEnd": dtEnd,
                        
                        "netGain": netGain,
                        "totalGain": totalGain,
                        "totalLoss": totalLoss,
                        "respCount": respCount,
                        "srCount": srCount,
                        "srPhase1": srPhase1,
                        "srPhase3": srPhase3,
                        
                        "background": background,
                        "VIvalue": VIvalue,
                        "minIRI": minIRI,
                        "VTvalue": VTvalue,
                        "FTvalue": FTvalue,
                        "DROvalue": DROvalue,
                        "noLossSign": noLossSign,
                        "lossWeight": lossWeight,
                        "gainWeight": gainWeight,
                        "intPoint": intPoint,
                        "symbol": symbol,
                        "terminatePhase1": terminatePhase1,
                        "dollarPerPoint": dollarPerPoint,
                        "intervalPeriodLength": intervalPeriodLength,
                        "intervalMult": intervalMult,
                        "criterion": criterion,
                        "metCountCriterion": metCountCriterion,
                        "reinsIntervalMult": reinsIntervalMult,
                        
                        "arrBLRespCount": arrBLRespCount,
                        "arrEXTRespCount": arrEXTRespCount,
                        "arrReinsRespCount": arrReinsRespCount,
                        "arrEvents": arrEvents
                    },
                    success: function(filecount) {
                        tickTock.terminate();
                        sessionStorage.setItem("filecount", filecount);
                        sessionStorage.setItem("basePay", basePay);
                        sessionStorage.setItem("netGain", netGain); // Save net gains for the EOS/Last page
                        sessionStorage.setItem("code", code); // Save net gains for the Last page
                        sessionStorage.setItem("lossWeight", lossWeight); // Save for file name
                        sessionStorage.setItem("noLossSign", noLossSign); // Save for file name
                        sessionStorage.setItem("dollarPerPoint", dollarPerPoint);
                        window.location.replace(URL_page_endofsession);
                    },
                    error: function() {
                        flagDuringSave = 0;
                    }
                })
            }

            function FleshlerHoffman_VI(Parameter) {
                if (Value_Variable == n) {Value_Variable = 0; }
                
                if (Value_Variable == 0) {
                    v = Parameter * 1000;
                    n = Iterations;
                    rd.fill(0); // set 0s
                    vi.fill(0);
                    
                    for (var i = 1; i <= n; i++) {
                        if (i == n) {
                            vi[i] = Math.round(v * (1 + Math.log(n)));
                        } else {
                            vi[i] = Math.round(v * (1 + (Math.log(n)) + (n - i) * (Math.log(n - i)) - (n - i + 1) * Math.log(n - i + 1)));
                        }
                        
                        do {
                            order = Math.floor((n * Math.random(Math.random() * (performance.now() / 3333))));
                        } while (rd[order] != 0);
                        
                        rd[order] = vi[i];
                    }
                    
		            for (var a = 0; a <= n; a++) { Sumxser = Sumxser + rd[a]; }
		            if (Sumxser != (v * n)) { rd[0] = rd[0] + ((v * n) - Sumxser); }
		            Sumxser = 0;
		            
                } 
            }
            
            function FleshlerHoffman_VT(Parameter) {
                if (Value_Variable_2 == n_2) {Value_Variable_2 = 0; }
                
                if (Value_Variable_2 == 0) {
                    v_2 = Parameter * 1000; 
                    n_2 = Iterations_2;
                    rd_2.fill(0); // set 0s
                    vi_2.fill(0);
                    
                    for (var i = 1; i <= n_2; i++) {
                        if (i == n_2) {
                            vi_2[i] = Math.round(v_2 * (1 + Math.log(n_2)));
                        } else {
                            vi_2[i] = Math.round(v_2 * (1 + (Math.log(n_2)) + (n_2 - i) * (Math.log(n_2 - i)) - (n_2 - i + 1) * Math.log(n_2 - i + 1)));
                        }
                        
                        do {
                            order_2 = Math.floor((n_2 * Math.random(Math.random() * (performance.now() / 3333))));
                        } while (rd_2[order_2] != 0);
                        
                        rd_2[order_2] = vi_2[i];
                    }
                    
		            for (var a = 0; a <= n_2; a++) { Sumxser_2 = Sumxser_2 + rd_2[a]; }
		            if (Sumxser_2 != (v_2 * n_2)) { rd_2[0] = rd_2[0] + ((v_2 * n_2) - Sumxser_2); }
		            Sumxser_2 = 0;
                } 
            }
            
            function indexOfMax(arr) {
                if (arr.length === 0) {
                    return -1;
                }
            
                var max = arr[0];
                var maxIndex = 0;
            
                for (var i = 1; i < arr.length; i++) {
                    if (arr[i] > max) {
                        maxIndex = i;
                        max = arr[i];
                    }
                }
                return maxIndex;
            }

            function btnmov(btn, minX, maxX, minY, maxY) {
                var newLoc_X = new Array(2);
                var newLoc_Y = new Array(2);
                
                var blnTop = Boolean(true);
                var blnBottom = Boolean(true);
                var blnLeft = Boolean(true);
                var blnRight = Boolean(true);
                
                var but = btn.getBoundingClientRect();
                newLoc_X[0] = but.left - buttonMotionStep;
                newLoc_X[1] = but.left + buttonMotionStep;
                newLoc_Y[0] = but.top - buttonMotionStep;
                newLoc_Y[1] = but.top + buttonMotionStep;

                if (newLoc_X[0] < minX) blnLeft = false;
                if (newLoc_X[1] > maxX) blnRight = false;
                if (newLoc_Y[0] < minY) blnTop = false;
                if (newLoc_Y[1] > maxY) blnBottom = false;

                var dirs = Number(blnLeft) + Number(blnRight) + Number(blnTop) + Number(blnBottom);
                var rn = 0;
                
                // 2 possible directions
                if (dirs == 2) {
                    rn = (Math.floor( Math.random() * 2) + 1); // 1-2
                    if (blnLeft) {
                        if (rn == 1) {
                            MoveLeft(btn);
                            return;
                        } else {
                            if (blnRight) {
                                MoveRight(btn);
                                return;
                            }
                            if (blnTop) {
                                MoveUp(btn);
                                return;
                            }
                            if (blnBottom) {
                                MoveDown(btn);
                                return;
                            }
                        }
                    }
                    
                    if (blnRight) {
                        if (rn == 1) {
                            MoveRight(btn);
                            return;
                        } else {
                            if (blnTop) {
                                MoveUp(btn);
                                return;
                            }
                            if (blnBottom) {
                                MoveDown(btn);
                                return;
                            }
                        }
                    }
                    
                    if (blnTop) {
                        if (rn == 1) {
                            MoveUp(btn);
                            return;
                        } else {
                            MoveDown(btn);
                            return;
                        }
                    }
                }
                
                //  3 possible directions
                if (dirs == 3) {
                    rn = (Math.floor( Math.random() * 3) + 1); // 1-3
                    if (!blnLeft) {
                        switch (rn) {
                            case 1:
                                MoveRight(btn);
                                break;
                            case 2:
                                MoveUp(btn);
                                break;
                            case 3:
                                MoveDown(btn);
                                break;
                        }
                        return;
                    }
                    
                    if (!blnRight) {
                        switch (rn) {
                            case 1:
                                MoveLeft(btn);
                                break;
                            case 2:
                                MoveUp(btn);
                                break;
                            case 3:
                                MoveDown(btn);
                                break;
                        }
                        return;
                    }
                    
                    if (!blnTop) {
                        switch (rn) {
                            case 1:
                                MoveLeft(btn);
                                break;
                            case 2:
                                MoveRight(btn);
                                break;
                            case 3:
                                MoveDown(btn);
                                break;
                        }
                        return;
                    }
                    
                    if (!blnBottom) {
                        switch (rn) {
                            case 1:
                                MoveLeft(btn);
                                break;
                            case 2:
                                MoveRight(btn);
                                break;
                            case 3:
                                MoveUp(btn);
                                break;
                        }
                        return;
                    }
                }
                
                // 4 possible directions
                if (dirs == 4) {
                    rn = (Math.floor( Math.random() * 4) + 1); // 1-4
                    switch (rn) {
                        case 1:
                            MoveLeft(btn);
                            break;
                        case 2:
                            MoveRight(btn);
                            break;
                        case 3:
                            MoveUp(btn);
                            break;
                        case 4:
                            MoveDown(btn);
                            break;
                    }
                    return;
                }
            }    

            function MoveLeft(btn) {
                var but = btn.getBoundingClientRect();
                btn.style.left = (but.left - buttonMotionStep) + "px";
                btn.style.top = but.top + "px";
            }
            
            function MoveRight(btn) {
                var but = btn.getBoundingClientRect();
                btn.style.left = (but.left + buttonMotionStep) + "px";
                btn.style.top = but.top + "px";
            }

            function MoveUp(btn) {
                var but = btn.getBoundingClientRect();
                btn.style.left = but.left + "px";
                btn.style.top = (but.top - buttonMotionStep) + "px";
            }
            
            function MoveDown(btn) {
                var but = btn.getBoundingClientRect();
                btn.style.left = but.left + "px";
                btn.style.top = (but.top + buttonMotionStep) + "px";
            }
            

        </script>
    </body>
</html>